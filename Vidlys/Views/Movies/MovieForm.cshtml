@model Vidlys.ViewModels.MovieFormViewModel
@{
    ViewBag.Title = "New";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@{
    ViewBag.Title = Model.Title;
}


<h2>@Model.Title</h2>

@using (Html.BeginForm("Save", "Movies")) // without the using it will only server as <form> with no closing tag but the use of "using" solves the issue
{
    <div class="form-group">
        @Html.LabelFor(m => m.Movie.Name) @* we are using lamba expression to render the properties in the form, in case of forms we have to do like this only.*@
        @Html.TextBoxFor(m => m.Movie.Name, new { @class = "form-control" }) @*If we use helper method like this MVC does the validation according to the model data annotations but if we would have
            used raw HTML we would have to use validation here also seperately*@
        @Html.ValidationMessageFor(m => m.Movie.Name)
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.Movie.ReleaseDate)
        @Html.TextBoxFor(m => m.Movie.ReleaseDate, "{0:d MMM yyyy}", new { @class = "form-control" })
        @Html.ValidationMessageFor(m => m.Movie.ReleaseDate)
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.Movie.GenreId)
        @Html.DropDownListFor(m => m.Movie.GenreId, new SelectList(Model.Genres, "Id", "Name"), "Select Genre Type", new { @class = "form-control" })
        @Html.ValidationMessageFor(m => m.Movie.GenreId)
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.Movie.NumberInStock)
        @Html.TextBoxFor(m => m.Movie.NumberInStock, new { @class = "form-control" })
        @Html.ValidationMessageFor(m => m.Movie.NumberInStock)
    </div>
    @Html.HiddenFor(m => m.Movie.Id)
    @Html.AntiForgeryToken() @*used to create an anti forgery csrf attack *@

    <button type="submit" class="btn btn-primary">Save</button>
}

@section scripts
{
    @Scripts.Render("~/bundles/jqueryval")  @*Client-side validation is enabled, so during validation no network trip is done*@
}